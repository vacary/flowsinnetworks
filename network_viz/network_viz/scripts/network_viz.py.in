#!/usr/bin/python

# Standard library imports
import os
import sys
import argparse

# Paths

## Main paths

home = os.path.expanduser("~") ## Source folder
#-------
root_dir_path =  @ROOT_DIR_PATH #important!
#-------
vroot_dir_path = os.path.join(root_dir_path,'network_viz','network_viz')
src_dir_path = os.path.join(vroot_dir_path,'src')

sys.path.append(root_dir_path)
sys.path.append(vroot_dir_path)
sys.path.append(src_dir_path)

CURRENT_DIR_PATH = os.getcwd()

## Auxiliary paths

#---
file_path_new_project   = os.path.join(src_dir_path,'databuilder','projects','new.py') ## Script to create new projects
file_path_sim           = os.path.join(src_dir_path,'databuilder','sim','sim.py') ## Simulation execution and save source data
file_path_sampler       = os.path.join(src_dir_path,'databuilder','sampler','gen.py') ## Data sampler
file_path_set           = os.path.join(src_dir_path,'databuilder','layouts','set.py') ## Set network layout
file_path_build         = os.path.join(src_dir_path,'databuilder','build.py') ## Program to run all the previous instructions
file_path_start         = os.path.join(src_dir_path,'display','main.py') ## Program to run the visualization GUI
#---

# Argument Parser

parser = argparse.ArgumentParser(description="[FlowsInNetworks] - Visualization software prototype 'network_viz'")
parser.add_argument('--new', metavar=('PROJECT_NAME'), help='Creates a new visualization project in the current working folder.', nargs=1, type=str)
parser.add_argument('--update', metavar=('PROJECT_NAME'), help='Full update for a visualization project.', nargs=1, type=str)
parser.add_argument('--update-layout', metavar=('PROJECT_NAME'), help='Layout data update.', nargs=1, type=str)
parser.add_argument('--update-sample', metavar=('PROJECT_NAME'), help='Simulation data sample update.', nargs=1, type=str)
parser.add_argument('--start', metavar=('PROJECT_NAME'), help='Start the visualization GUI for an updated project.', nargs=1, type=str)

args = parser.parse_args()

if args.new is not None:
    
    NETWORK_NAME = args.new.pop()
    sys.argv = ['new.py', NETWORK_NAME]
    execfile(file_path_new_project)

if args.update is not None:

    NETWORK_NAME = args.update.pop()    
    PROJECT_DIR_PATH = os.path.abspath(os.path.join(CURRENT_DIR_PATH, NETWORK_NAME))
    sys.path.append(os.path.abspath(os.path.join('.')))
    sys.argv = ['build.py', NETWORK_NAME, PROJECT_DIR_PATH]
    execfile(file_path_build)
    
if args.update_layout is not None:
    
    NETWORK_NAME = args.update_layout.pop()    
    PROJECT_DIR_PATH = os.path.abspath(os.path.join(CURRENT_DIR_PATH, NETWORK_NAME))
    sys.path.append(os.path.abspath(os.path.join('.')))
    sys.argv = ['set.py', NETWORK_NAME, PROJECT_DIR_PATH]
    execfile(file_path_set)
    
if args.update_sample is not None:
    
    NETWORK_NAME = args.update_sample.pop()    
    PROJECT_DIR_PATH = os.path.abspath(os.path.join(CURRENT_DIR_PATH, NETWORK_NAME))
    sys.path.append(os.path.abspath(os.path.join('.')))
    
    sys.argv = ['gen.py', NETWORK_NAME, PROJECT_DIR_PATH]
    execfile(file_path_sampler)
    sys.argv = ['set.py', NETWORK_NAME, PROJECT_DIR_PATH]
    execfile(file_path_set)
    
    
if args.start is not None:

    NETWORK_NAME = args.start.pop()
    PROJECT_DIR_PATH = os.path.abspath(os.path.join(CURRENT_DIR_PATH, NETWORK_NAME))
    sys.path.append(os.path.abspath(os.path.join('.')))
    sys.argv = ['main.py', NETWORK_NAME, PROJECT_DIR_PATH]
    execfile(file_path_start)


