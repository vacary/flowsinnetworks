"""

VISUALIZATION STYLE - GEOMETRY

"""

import os, sys
import networkx as nx
import random

import numpy as np

lib_path = os.path.abspath(os.path.join('..','..','..','lib'))
sys.path.append(lib_path)

import lib.vis.vfc as vfc
import lib.layouts.bsplines as bsplines

# STYLE PARAMETERS

NODE_SIZE           = 1.0
NODE_OPACITY        = 1.0
NODE_LABEL_FONTSIZE = 8


def setScene(G,renderer):
    
    vtkNodes = vfc.VtkNodesElementGlyph(G,NODE_SIZE,NODE_OPACITY,NODE_LABEL_FONTSIZE)
    
    renderer.AddActor(vtkNodes.vtkActor)
    renderer.AddActor2D(vtkNodes.vtkActor2D)

    edge_log = {}

    counter = 0
    for edge in G.edges_iter():
    
        #if (edge[0] == 6 and edge[1] == 2):
    
        if (counter >= 0):
            
            edge_tail = G.node[edge[0]]
            edge_head = G.node[edge[1]]
            
            if edge not in edge_log:
                edge_log[edge] = 0
            else:
                edge_log[edge] = edge_log[edge] + 1
            
            edge_id = edge_log[edge]
            
            edge_geometry = G.edge[edge[0]][edge[1]][edge_id]['geometry']
            
            #print edge_geometry

            controlPoints = bsplines.getControlPointsFromGVizData(edge_geometry)
            listOfPoints = bsplines.getPointsFromBSplineInterpolation(controlPoints)
             
            vtkLines = vfc.VtkLines(listOfPoints)
            vtkLines.vtkActor.GetProperty().SetColor(random.random(),random.random(),random.random())
            renderer.AddActor(vtkLines.vtkActor)
 
#             vtkPoints = vfc.VtkPoints(listOfPoints)
#             vtkPoints.vtkActor.GetProperty().SetColor(random.random(),random.random(),random.random())
#             renderer.AddActor(vtkPoints.vtkActor)

        counter = counter + 1
         
    return None
    
def update():
    
    return None
