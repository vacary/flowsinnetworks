
from numpy import *

import matplotlib.pyplot as plt
import os

# Queue data functions

def getQValue(theta,arrayOfPoints):

    z = 0.0
    
    if (theta < arrayOfPoints[0][0] ):
        
        z = 0.0
        
    elif (theta > arrayOfPoints[-1][0] ):
        
        z = -1.0
        print theta
        print arrayOfPoints[-1][0]
        
    else:
        
        i = 0
        stop = 0
        while ( i < arrayOfPoints.shape[0]-1 and stop == 0 ):
    
            if (arrayOfPoints[i][0] <= theta and theta <= arrayOfPoints[i+1][0]):
                
                p1 = arrayOfPoints[i]
                p2 = arrayOfPoints[i+1]
                                
                stop = 1
    
            i = i + 1
        
        if (p2[0] != p1[0]):
            z = ((p2[1]-p1[1])/(p2[0]-p1[0]))*(theta - p1[0]) + p1[1]
        else:
            z = p2[1]
        

    return z

def getQueueDataFromSimulationByEdge(G,ntail,nhead,time_step,Tmax):


    vQ = G[ntail][nhead][0]['z_e_overtime'][:]
    vtheta = G[ntail][nhead][0]['switching_times'][:]

    arrayOfPoints = zeros([len(vQ),2])

    for i in xrange(0,len(vQ)):
        arrayOfPoints[i,0] = vtheta[i] 
        arrayOfPoints[i,1] = vQ[i]
    
    #print 'arrayOfPoints'
    #print arrayOfPoints

    N = int(Tmax / time_step)

    lst = zeros([N+1,2])

    for i in xrange(N+1):
        theta = i*time_step
        lst[i,0] = theta
        lst[i,1] = getQValue(theta, arrayOfPoints)

    #print(str(ntail)+':::'+str(nhead))
    #print(lst)
    plt.plot(lst[:,0],lst[:,1],'bo')

    return lst

def genQueueData(G,time_step,Tmax,graphName):
    
    path = os.path.abspath(os.path.join('data'))

    f = file(os.path.join(path,graphName+".txt"), "w")
    f.close()
    
    for e in sorted(set(G.edges_iter())):

        edges = G.edge[e[0]][e[1]]
        
    
        # GRAPH
        
        if (len(edges) == 1):
            
            data = getQueueDataFromSimulationByEdge(G,e[0],e[1],time_step,Tmax)
            
            # save queue data in different files (folder designated by path)
            
        # MULTIGRAPH
            
        print(str(G.edge[e[0]][e[1]])+'\n\n')
            

